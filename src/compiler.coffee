# * Compile CoffeeScript file to JS
# * Write compiled code to JS file
# * [Coffeelint](http://www.coffeelint.org/) source code

# ---

# ### Require Dependencies

# #### Standard Node Modules
# `util` : [Utilities](http://nodejs.org/api/util.html)  
# `fs` : [File System](http://nodejs.org/api/fs.html)  
# `path` : [Path](http://nodejs.org/api/path.html)  
# `events` : [Events](http://nodejs.org/api/events.html)
util = require('util') 
fs = require('fs')
path = require('path')
EventEmitter = require('events').EventEmitter

# #### Third Party Modules
# `coffee-script` by [jashkenas@Jeremy Ashkenas](https://github.com/jashkenas/coffee-script)  
# `coffeelint` by [clutchski@Matt Perpick](https://github.com/clutchski/coffeelint)  
# `minimatch` by [Isaac Z. Schlueter@issacs](https://github.com/issacs/minimatch)
coffee = require('coffee-script')
coffeelint = require('coffeelint')
minimatch = require('minimatch')

# ---

# ## Compiler Class
module.exports = class Compiler extends EventEmitter

  # ### Class Properties
  # `@csfile (String)` : CoffeeScript file path to compile  
  # `@jsfile (String)` : Javascript destination file path to save compiled code to  
  # `@lintConfig (Object)` : [Options](http://www.coffeelint.org/#options) for Coffeelint with `nolint` option added to avoid coffeelinting after compiling   
  # `@mapper (Object)` : rules to map `@csfile` path to `@jsfile` path 

  # ### Events
  # `compiled` : successfully compiled `@csfile`  
  # `compile error` : failed to compile `@csfile`  
  # `write error` : failed to write to `@jsfile`  
  # `nofile` : failed to find `@csfile`  
  # `js removed` : successfully removed `@jsfile`  
  # `unlink error` : failed to unlink/remove `@jsfile`  

  # #### constructor
  # `@csfile` : see *Class Properties* section  
  # `@lintConfig` : see *Class Properties* section
  # `@mapper` : see *Class Properties* section  
  constructor:(@csfile, @lintConfig = {}, @mapper) ->
    if @csfile
      @jsfile = @_getJSPath(@csfile, @mapper)

  # ---

  # ### Private Methods

  # #### Replace file extension
  # `txt (String)` : a file path to replace  
  # `ext (String)` : a new extension to replace with
  _replaceExt: (txt, ext = 'js') ->
    return txt.replace(/\.coffee$/, "." + ext)

  # #### Get destination jsfile path to save compiled JS code to
  # `csfile (String)` : a path to the original CoffeeScript file  
  # `mapper (Object)` : rules to map `csfile` path to output js file path 
  _getJSPath: (csfile, mapper) ->
    filebase = path.basename(csfile)
    dirname = path.dirname(csfile)
    basename = path.basename(dirname)
    if typeof(mapper) is 'object' and not util.isArray(mapper)
      for k, v of mapper
        try
          m = minimatch(csfile, k)
          if m
            if util.isArray(v)
              return @_replaceExt(path.normalize(csfile.replace(v[0],v[1])))
            else if typeof(v) is 'function'
              return @_replaceExt(path.normalize(v(csfile)))
        catch e
    return "#{dirname}/" + @_replaceExt(filebase)

  # #### Emit compiled event with lint result
  # `lint (Object)` : a coffeelint result object 
  _emitCompiled: (lint) ->
    @emit(
      'compiled',
      {file: @csfile, jsfile: @jsfile, lint: lint}
    )

  # #### Emit write error event with lint result
  # `err (Object)` : an error object  
  # `lint (Object)` : a coffeelint result object  
  _emitWriteError: (err, lint) ->
    @emit(
      'write error',
      {file: @csfile, jsfile: @jsfile, err: err, lint: lint}
    )

  # #### Emit an event based on JS writeErr, pass on lint result
  # `lint (Object)` : a coffeelint result object  
  # `writeErr (Object)` : an error object from `_writeJS` operation 
  _emitter: (lint, writeErr) ->
    if writeErr
      @_emitWriteError(writeErr, lint)
    else
      @_emitCompiled(lint)

  # #### Write compiled code to JS file
  # `compiled (String)` : a compiled JS code  
  # `lint (Object)` : a coffeelint result object    
  # `nojs (Bool)` : `true` to avoid writing to `@jsfile`
  _writeJS: (compiled, lint, nojs) ->
    if nojs
      @_emitter(lint, null)
    else
      version = '// Generated by CoffeeScript ' + coffee.VERSION
      fs.writeFile(@jsfile, [version, compiled].join('\n'), (err) =>
        @_emitter(lint,err)
      )

  # #### Coffeelint source code 
  # `code (String)` : a CoffeeScript source code to lint 
  _coffeeLint: (code) ->
    # abort if `@lintConfig.nolint` is true
    if @lintConfig.nolint
      lint = false
    else
      try
        lint = coffeelint.lint(code, @lintConfig)
      catch e
        lint = {err: e}
    return lint

  # #### Read @csfile and get coffeescript code 
  # `cb (Function)` : a callback funtion  
  _getCode: (cb) ->
    fs.readFile(@csfile, 'utf8', (err, code) =>
      cb({err: err, code: code, file: @csfile})
    )

  # ---

  # ### Public API

  # #### Remove the destination JS file and emit an event accordingly
  # `cb (Function)` : a callback function 
  rmJS: (cb) ->
    
    fs.unlink(@jsfile, (err) =>
      if err
        @emit(
          'unlink error',
          {file: @csfile, jsfile: @jsfile, err: err}
        )
      else
        @emit(
          'js removed',
          {file: @csfile}
        )
      cb?()
    )

  # #### Compile CoffeeScript to JavaScript, lint and write to a JS file
  # `nojs (Bool)` : `true` to avoid writing to `@jsfile`    
  compile: (nojs = false) ->
    # Get coffeescript sorce code from `@csfile`
    @_getCode((data) =>
      if data.err
        # emit `nofile` event if `@csfile` is not found
        @emit(
          'nofile',
          {file: @csfile, err: data.err}
        )
      else
        # `coffee.compile()` `data.code` to JS  
        try
          compiled = coffee.compile(data.code)
          # If compilation is sucessful, then `@_coffeeLint()` `data.code`
          lint = @_coffeeLint(data.code)
          #  and write `compiled` code to `@jsfile`
          @_writeJS(compiled, lint, nojs)
        # If something went wrong, emit `compile error`
        catch e
          @emit(
            'compile error',
            {file: @csfile, err: e}
          )
    )