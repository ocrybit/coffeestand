// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, Walker, async, fs, minimatch, path, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  async = require('async');

  minimatch = require('minimatch');

  module.exports = Walker = (function(_super) {

    __extends(Walker, _super);

    function Walker(root, opts) {
      var _ref;
      this.root = root != null ? root : process.cwd();
      if (opts == null) {
        opts = {};
      }
      this.ignoreFiles = (_ref = opts.ignoreFiles) != null ? _ref : [];
      this.callbacks = opts.callbacks;
      this.dirs = [];
      this.files = [];
      this.readCount = 0;
    }

    Walker.prototype._isIgnore = function(dir) {
      var v, _i, _len, _ref;
      _ref = this.ignoreFiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (minimatch(dir, v)) {
          return true;
        }
      }
      return false;
    };

    Walker.prototype._end = function(cb) {
      this.emit('end');
      return typeof cb === "function" ? cb({
        dirs: this.dirs,
        files: this.files
      }) : void 0;
    };

    Walker.prototype._readEnd = function(cb) {
      this.readCount -= 1;
      if (this.readCount === 0) {
        return this._end(cb);
      }
    };

    Walker.prototype._reportDir = function(dir, stat, cb) {
      var _ref;
      this.dirs.push(dir);
      this.emit('dir', dir, stat);
      this.readCount += 1;
      this._readdir(dir, cb);
      return (_ref = this.callbacks) != null ? typeof _ref.dir === "function" ? _ref.dir(dir, stat) : void 0 : void 0;
    };

    Walker.prototype._reportFile = function(file, stat) {
      var _ref;
      this.files.push(file);
      this.emit('file', file, stat);
      return (_ref = this.callbacks) != null ? typeof _ref.file === "function" ? _ref.file(file, stat) : void 0 : void 0;
    };

    Walker.prototype._readdir = function(dir, cb) {
      var _this = this;
      return fs.readdir(dir, function(err, files) {
        if (err) {
          _this.dirs = _(_this.dirs).without(dir);
          return _this._readEnd(cb);
        } else {
          return async.forEach(files, function(file, callback) {
            var filepath;
            filepath = path.join(dir, file);
            if (_this._isIgnore(filepath)) {
              return callback();
            } else {
              return fs.stat(filepath, function(err, stat) {
                if (err) {
                  return callback();
                } else {
                  if (stat.isDirectory()) {
                    _this._reportDir(filepath, stat, cb);
                  } else if (stat.isFile()) {
                    _this._reportFile(filepath, stat);
                  }
                  return callback();
                }
              });
            }
          }, function() {
            return _this._readEnd(cb);
          });
        }
      });
    };

    Walker.prototype.walk = function(cb) {
      var _this = this;
      if (this._isIgnore(this.root)) {
        return this._end(cb);
      } else {
        return fs.stat(this.root, function(err, stat) {
          if (err) {
            _this.emit('nofile', err);
            return _this._end(cb);
          } else if (!stat.isDirectory()) {
            _this.emit('not dir', _this.root);
            return _this._end(cb);
          } else {
            return _this._reportDir(_this.root, stat, cb);
          }
        });
      }
    };

    return Walker;

  })(EventEmitter);

}).call(this);
